select * from user_mining_models;
select vector_embedding(doc_model using 'A' as data) as test;
select * from customers;

create table customers_ebd (
  id number generated by default on null as identity constraint customers_ebd_pk primary key,
  customer_id number not null constraint customers_ebd_fk_1 references customers (customer_id) on delete cascade,
  info_c clob,
  info_v vector
);

begin
  for i in (
    select c.customer_id,
           'Full name: ' || c.full_name as full_name,
           'Email address: ' || c.email_address as email_address,
           'Orders count: ' || o.orders_count as orders_count,
           'First order at ' || to_char(o.first_order, 'DD-MON-YYYY HH24:MI:SS') as first_order,
           'Last order at ' || to_char(o.last_order, 'DD-MON-YYYY HH24:MI:SS') as last_order,
           'Total of all orders: ' || to_char(o.orders_total, 'FML999G999G990D00') as orders_total
    from customers c,
         lateral (
             select o.customer_id,
                    count(o.order_id) as orders_count,
                    min(o.order_datetime) as first_order,
                    max(o.order_datetime) as last_order,
                    sum(i.order_total) as orders_total
               from orders o, lateral (
                      select order_id, sum(unit_price * quantity) as order_total
                      from order_items
                      group by order_id
                    ) i
              where i.order_id = o.order_id
              group by o.customer_id
         ) o
    where o.customer_id (+) = c.customer_id
  ) loop
    insert into customers_ebd (customer_id, info_c) values (i.customer_id, i.full_name);
    insert into customers_ebd (customer_id, info_c) values (i.customer_id, i.email_address);
    insert into customers_ebd (customer_id, info_c) values (i.customer_id, i.orders_count);
    insert into customers_ebd (customer_id, info_c) values (i.customer_id, i.first_order);
    insert into customers_ebd (customer_id, info_c) values (i.customer_id, i.last_order);
    insert into customers_ebd (customer_id, info_c) values (i.customer_id, i.orders_total);
  end loop;
  commit;
end;
/

update customers_ebd set info_v = to_vector(vector_embedding(doc_model using info_c as data));
commit;

select * from customers_ebd order by 2, 1;